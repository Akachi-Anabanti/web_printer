---
- name: Deploy Application on Local Machine
  hosts: localhost
  become: yes
  vars:
    app_repo: "https://github.com/Akachi-Anabanti/web_printer.git"
    app_dir: "{{ ansible_env.HOME }}/web_printer"
    backend_dir: "{{ app_dir }}/printer-management"
    frontend_dir: "{{ app_dir }}/printer-management-frontend"

  tasks:
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - openjdk-21-jdk
          - maven
          - git
          - cups
          - cups-bsd
          - nginx
        state: present
      when: ansible_os_family == "Debian"

    - name: Add NodeSource repository
      get_url:
        url: https://deb.nodesource.com/setup_20.x
        dest: /tmp/nodesource_setup.sh
        mode: '0755'
      when: ansible_os_family == "Debian"

    - name: Run NodeSource setup script
      command: /tmp/nodesource_setup.sh
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
      when: ansible_os_family == "Debian"

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Clone application repository
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_dir }}"
        version: main
      become_user: "{{ ansible_user_id }}"

    - name: Build the backend
      command: mvn clean install
      args:
        chdir: "{{ backend_dir }}"
      become_user: "{{ ansible_user_id }}"

    - name: Build the frontend
      command: npm install && npm run build
      args:
        chdir: "{{ frontend_dir }}"
      become_user: "{{ ansible_user_id }}"

    - name: Configure Nginx
      copy:
        dest: /etc/nginx/sites-available/myapp
        content: |
          server {
              listen 80;
              server_name localhost;
              location / {
                  root {{ frontend_dir }}/build;
                  index index.html index.htm;
                  try_files $uri $uri/ /index.html;
              }
              location /api {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: Restart Nginx

    - name: Enable Nginx configuration
      file:
        src: /etc/nginx/sites-available/myapp
        dest: /etc/nginx/sites-enabled/myapp
        state: link
      notify: Restart Nginx

    - name: Create startup script
      copy:
        dest: "{{ ansible_env.HOME }}/start_app.sh"
        content: |
          #!/bin/bash
          cd {{ backend_dir }}
          nohup mvn spring-boot:run > /dev/null 2>&1 &
          cd {{ frontend_dir }}
          nohup npm start > /dev/null 2>&1 &
        mode: '0755'
      become_user: "{{ ansible_user_id }}"

  handlers:
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
