- name: Deploy Application on Local Machine
  hosts: localhost
  become: yes
  vars:
    app_repo: "https://github.com/Akachi-Anabanti/web_printer.git"
    app_dir: "{{ ansible_env.HOME }}/web_printer"
    backend_dir: "{{ app_dir }}/printer-management"
    frontend_dir: "{{ app_dir }}/printer-management-frontend"
    prometheus_version: "2.37.0"
    loki_version: "2.8.0"
    promtail_version: "2.8.0"

  tasks:
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - openjdk-21-jdk
          - maven
          - git
          - cups
          - cups-bsd
          - nginx
          - wget
          - unzip
          - software-properties-common
        state: present
      when: ansible_os_family == "Debian"

    - name: Add NodeSource repository
      get_url:
        url: https://deb.nodesource.com/setup_20.x
        dest: /tmp/nodesource_setup.sh
        mode: '0755'
      when: ansible_os_family == "Debian"

    - name: Run NodeSource setup script
      command: /tmp/nodesource_setup.sh
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
      when: ansible_os_family == "Debian"

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      
    - name: Build the backend
      command: mvn clean install
      args:
        chdir: "{{ backend_dir }}"
      become_user: "{{ ansible_user_id }}"

    - name: Install npm packages frontend
      command: npm install
      args:
        chdir: "{{ frontend_dir }}"
      become_user: "{{ ansible_user_id }}"
    
    - name: Build the frontend
      command: npm run build
      args:
        chdir: "{{ frontend_dir }}"
      become_user: "{{ ansible_user_id }}"
      
    - name: Configure Nginx
      copy:
        dest: /etc/nginx/sites-available/myapp
        content: |
          server {
              listen 80;
              server_name localhost;
              location / {
                  root {{ frontend_dir }}/build;
                  index index.html index.htm;
                  try_files $uri $uri/ /index.html;
              }
              location /api {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: Restart Nginx

    - name: Enable Nginx configuration
      file:
        src: /etc/nginx/sites-available/myapp
        dest: /etc/nginx/sites-enabled/myapp
        state: link
      notify: Restart Nginx

    - name: Create systemd service for Spring Boot application
      copy:
        dest: /etc/systemd/system/printerapp.service
        content: |
          [Unit]
          Description=Printer sharing Spring Boot application
          After=network.target

          [Service]
          User={{ ansible_user_id }}
          WorkingDirectory={{ backend_dir }}
          ExecStart=/usr/bin/mvn spring-boot:run
          SuccessExitStatus=143
          TimeoutStopSec=10
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      notify: Start Spring Boot Service

    - name: Enable and start Spring Boot service
      systemd:
        name: printerapp
        enabled: yes
        state: started

    - name: Install Prometheus
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
        dest: /tmp/prometheus.tar.gz
      become_user: "{{ ansible_user_id }}"

    - name: Extract Prometheus
      unarchive:
        src: /tmp/prometheus.tar.gz
        dest: /opt/
        remote_src: yes
      become_user: "{{ ansible_user_id }}"

    - name: Configure Prometheus
      copy:
        dest: /etc/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s

          scrape_configs:
            - job_name: 'spring_boot_app'
              metrics_path: '/actuator/prometheus'
              static_configs:
                - targets: ['localhost:8080']

    - name: Create systemd service for Prometheus
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          ExecStart=/opt/prometheus-{{ prometheus_version }}.linux-amd64/prometheus --config.file /etc/prometheus/prometheus.yml

          [Install]
          WantedBy=default.target

    - name: Enable and start Prometheus service
      systemd:
        name: prometheus
        enabled: yes
        state: started

    - name: Install Grafana
      apt:
        name: grafana
        state: present

    - name: Enable and start Grafana service
      systemd:
        name: grafana-server
        enabled: yes
        state: started

    - name: Install Loki
      get_url:
        url: "https://github.com/grafana/loki/releases/download/v{{ loki_version }}/loki-linux-amd64.zip"
        dest: /tmp/loki.zip

    - name: Extract Loki
      unarchive:
        src: /tmp/loki.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Loki config
      copy:
        dest: /etc/loki/loki-config.yaml
        content: |
          auth_enabled: false

          server:
            http_listen_port: 3100

          ingester:
            lifecycler:
              address: 127.0.0.1
              ring:
                kvstore:
                  store: inmemory
              final_sleep: 0s
            chunk_idle_period: 5m
            chunk_retain_period: 30s

          schema_config:
            configs:
              - from: 2020-05-15
                store: boltdb
                object_store: filesystem
                schema: v11
                index:
                  prefix: index_
                  period: 168h

          storage_config:
            boltdb:
              directory: /tmp/loki/index
            filesystem:
              directory: /tmp/loki/chunks

          limits_config:
            enforce_metric_name: false
            reject_old_samples: true
            reject_old_samples_max_age: 168h

          chunk_store_config:
            max_look_back_period: 0s

          table_manager:
            retention_deletes_enabled: false
            retention_period: 0s

    - name: Create systemd service for Loki
      copy:
        dest: /etc/systemd/system/loki.service
        content: |
          [Unit]
          Description=Loki service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/loki -config.file /etc/loki/loki-config.yaml

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start Loki service
      systemd:
        name: loki
        enabled: yes
        state: started

    - name: Install Promtail
      get_url:
        url: "https://github.com/grafana/loki/releases/download/v{{ promtail_version }}/promtail-linux-amd64.zip"
        dest: /tmp/promtail.zip

    - name: Extract Promtail
      unarchive:
        src: /tmp/promtail.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Promtail config
      copy:
        dest: /etc/promtail/promtail-config.yaml
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /tmp/positions.yaml

          clients:
            - url: http://localhost:3100/loki/api/v1/push

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*log
            - job_name: spring_boot
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: spring_boot
                    __path__: /path/to/your/spring-boot/logs/*.log

    - name: Create systemd service for Promtail
      copy:
        dest: /etc/systemd/system/promtail.service
        content: |
          [Unit]
          Description=Promtail service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/promtail -config.file /etc/promtail/promtail-config.yaml

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start Promtail service
      systemd:
        name: promtail
        enabled: yes
        state: started

  handlers:
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Start Spring Boot Service
      systemd:
        name: printerapp
        state: started
